import json
import logging
import asyncio
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.contrib.auth.decorators import login_required
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from telegram import Update
from telegram.ext import ContextTypes
from .bot import get_or_create_bot, start_bot_for_user, stop_bot_for_user
from core.models import Salon, UserSession

User = get_user_model()
logger = logging.getLogger(__name__)

def get_user_session(telegram_user_id):
    """Get user session data from database"""
    try:
        session = UserSession.objects.get(user_id=telegram_user_id)
        return session.session_data
    except UserSession.DoesNotExist:
        return {}

def set_user_session(telegram_user_id, data):
    """Set user session data in database"""
    session, created = UserSession.objects.get_or_create(
        user_id=telegram_user_id,
        defaults={'session_data': data}
    )
    if not created:
        session.session_data = data
        session.save()

def clear_user_session(telegram_user_id):
    """Clear user session data from database"""
    UserSession.objects.filter(user_id=telegram_user_id).delete()

def start_salon_registration(telegram_user_id):
    """Start salon registration process"""
    set_user_session(telegram_user_id, {
        'state': 'salon_registration',
        'step': 'name',
        'salon_data': {}
    })

def handle_salon_registration_step(bot, user, chat_id, text, session_data, telegram_user_id):
    """Handle salon registration steps"""
    step = session_data.get('step')
    salon_data = session_data.get('salon_data', {})
    
    logger.info(f"Registration step for telegram_user {telegram_user_id}: step={step}, text='{text}'")
    
    if step == 'name':
        salon_data['name'] = text
        session_data['step'] = 'address'
        session_data['salon_data'] = salon_data
        set_user_session(telegram_user_id, session_data)
        send_message(bot, chat_id, "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–ª–æ–Ω–∞:")
        
    elif step == 'address':
        salon_data['address'] = text
        session_data['step'] = 'phone'
        session_data['salon_data'] = salon_data
        set_user_session(telegram_user_id, session_data)
        send_message(bot, chat_id, "üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Å–∞–ª–æ–Ω–∞:")
        
    elif step == 'phone':
        salon_data['phone'] = text
        session_data['step'] = 'email'
        session_data['salon_data'] = salon_data
        set_user_session(telegram_user_id, session_data)
        send_message(bot, chat_id, "üìß –í–≤–µ–¥–∏—Ç–µ email —Å–∞–ª–æ–Ω–∞:")
        
    elif step == 'email':
        salon_data['email'] = text
        session_data['step'] = 'working_hours'
        session_data['salon_data'] = salon_data
        set_user_session(telegram_user_id, session_data)
        send_message(bot, chat_id, "üïê –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–Ω-–ü—Ç 9:00-18:00, –°–± 10:00-16:00):")
        
    elif step == 'working_hours':
        salon_data['working_hours'] = text
        session_data['step'] = 'telegram_bot_token'
        session_data['salon_data'] = salon_data
        set_user_session(telegram_user_id, session_data)
        send_message(bot, chat_id, """
ü§ñ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–∞–ª–æ–Ω–∞:

üìù –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:
1. –ù–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω

–¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz
        """.strip())
        
    elif step == 'telegram_bot_token':
        # Validate telegram bot token format
        if not text or not text.count(':') == 1:
            send_message(bot, chat_id, """
‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞!

–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª ':' –∏ –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:
123456789:ABCdefGHIjklMNOpqrsTUVwxyz

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
            """.strip())
            return
        
        salon_data['telegram_bot_token'] = text
        session_data['step'] = 'telegram_bot_username'
        session_data['salon_data'] = salon_data
        set_user_session(telegram_user_id, session_data)
        send_message(bot, chat_id, """
ü§ñ –í–≤–µ–¥–∏—Ç–µ username Telegram –±–æ—Ç–∞ (–±–µ–∑ @):

–ù–∞–ø—Ä–∏–º–µ—Ä: my_salon_bot
–≠—Ç–æ –∏–º—è –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤ @BotFather
        """.strip())
        
    elif step == 'telegram_bot_username':
        # Clean username (remove @ if present)
        username = text.strip().lstrip('@')
        salon_data['telegram_bot_username'] = username
        session_data['step'] = 'openai_api_key'
        session_data['salon_data'] = salon_data
        set_user_session(telegram_user_id, session_data)
        send_message(bot, chat_id, """
üîë –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI:

üìù –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á:
1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://platform.openai.com/api-keys
2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å
3. –ù–∞–∂–º–∏—Ç–µ 'Create new secret key'
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á

–ö–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'sk-' –∏ –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:
sk-proj-abc123def456ghi789jkl...
        """.strip())
        
    elif step == 'openai_api_key':
        # Validate OpenAI API key format
        if not text or not text.startswith('sk-'):
            send_message(bot, chat_id, """
‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞!

–ö–ª—é—á OpenAI –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-'
–ù–∞–ø—Ä–∏–º–µ—Ä: sk-proj-abc123def456ghi789jkl...

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
            """.strip())
            return
        
        salon_data['openai_api_key'] = text
        session_data['step'] = 'confirmation'
        session_data['salon_data'] = salon_data
        set_user_session(telegram_user_id, session_data)
        
        # Show summary and ask for confirmation
        summary_message = f"""
üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–∞–ª–æ–Ω–∞:

üè™ –ù–∞–∑–≤–∞–Ω–∏–µ: {salon_data['name']}
üìç –ê–¥—Ä–µ—Å: {salon_data['address']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {salon_data['phone']}
üìß Email: {salon_data['email']}
üïê –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {salon_data['working_hours']}
ü§ñ –ë–æ—Ç: @{salon_data['telegram_bot_username']}
üîë OpenAI –∫–ª—é—á: {salon_data['openai_api_key'][:10]}...

‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.
        """
        
        send_message(bot, chat_id, summary_message.strip())
        
    elif step == 'confirmation':
        if text.lower() in ['–¥–∞', 'yes', 'y', '–¥']:
            # Create salon and new business user
            try:
                import secrets
                import string
                
                # Generate username based on salon name (transliterate to Latin)
                def transliterate_to_latin(text):
                    """Convert Cyrillic to Latin characters"""
                    cyrillic_to_latin = {
                        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
                        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
                        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
                        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
                        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
                    }
                    result = ''
                    for char in text.lower():
                        if char in cyrillic_to_latin:
                            result += cyrillic_to_latin[char]
                        elif char.isalnum():
                            result += char
                    return result
                
                salon_name_transliterated = transliterate_to_latin(salon_data['name'])
                salon_name_clean = ''.join(c for c in salon_name_transliterated if c.isalnum())
                base_username = f"salon_{salon_name_clean[:15]}" if salon_name_clean else 'salon_business'
                
                # Ensure unique username
                username = base_username
                counter = 1
                while User.objects.filter(username=username).exists():
                    username = f"{base_username}_{counter}"
                    counter += 1
                
                # Generate secure password
                alphabet = string.ascii_letters + string.digits + '!@#$%&*'
                password = ''.join(secrets.choice(alphabet) for _ in range(16))
                
                # Create new user for the salon
                salon_user = User.objects.create_user(
                    username=username,
                    email=salon_data['email'],
                    password=password,
                    first_name=salon_data['name'][:30],  # Limit length
                    telegram_bot_token=salon_data['telegram_bot_token'],
                    openai_api_token=salon_data['openai_api_key'],
                    is_staff=True  # –î–∞–µ–º –ø—Ä–∞–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
                )
                
                # –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å —Å–∞–ª–æ–Ω–∞–º–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
                from django.contrib.auth.models import Permission
                from django.contrib.contenttypes.models import ContentType
                from core.models import Master, Service, Client, Appointment, Document, Post
                
                # –ú–æ–¥–µ–ª–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞
                models_to_grant = [Salon, Master, Service, Client, Appointment, Document, Post]
                
                for model in models_to_grant:
                    content_type = ContentType.objects.get_for_model(model)
                    permissions = Permission.objects.filter(content_type=content_type)
                    for perm in permissions:
                        salon_user.user_permissions.add(perm)
                
                # Create salon
                salon = Salon.objects.create(
                    user=salon_user,
                    name=salon_data['name'],
                    address=salon_data['address'],
                    phone=salon_data['phone'],
                    email=salon_data['email'],
                    working_hours={'text': salon_data['working_hours']},
                    telegram_bot_token=salon_data['telegram_bot_token'],
                    telegram_bot_username=salon_data['telegram_bot_username'],
                    openai_api_key=salon_data['openai_api_key'],
                    timezone='UTC'
                )
                
                success_message = f"""
‚úÖ –°–∞–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!

üè™ –ù–∞–∑–≤–∞–Ω–∏–µ: {salon.name}
üìç –ê–¥—Ä–µ—Å: {salon.address}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {salon.phone}
üìß Email: {salon.email}
üïê –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {salon_data['working_hours']}
ü§ñ –ë–æ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤: @{salon.telegram_bot_username}

üîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-–∞–¥–º–∏–Ω–∫—É:
URL: https://salonify-app-3cd2419b7b71.herokuapp.com/admin/
–õ–æ–≥–∏–Ω: {username}
–ü–∞—Ä–æ–ª—å: {password}

‚ö†Ô∏è –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!
–ü–∞—Ä–æ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.

üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –í–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook –¥–ª—è –±–æ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
3. –î–æ–±–∞–≤—å—Ç–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —É—Å–ª—É–≥–∏
4. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø–∏—Å–∏!

ID —Å–∞–ª–æ–Ω–∞: {salon.id}
                """
                
                send_message(bot, chat_id, success_message.strip())
                
                # Clear session
                clear_user_session(telegram_user_id)
                
            except Exception as e:
                logger.error(f"Error creating salon: {str(e)}")
                send_message(bot, chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–ª–æ–Ω–∞: {str(e)}")
                clear_user_session(telegram_user_id)
        
        elif text.lower() in ['–Ω–µ—Ç', 'no', 'n', '–Ω']:
            send_message(bot, chat_id, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register_salon –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.")
            clear_user_session(telegram_user_id)
        
        else:
            send_message(bot, chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç':")


@csrf_exempt
@require_http_methods(["POST"])
def webhook(request, bot_token):
    """Handle Telegram webhook updates"""
    try:
        # Parse update
        update_data = json.loads(request.body)
        logger.info(f"Received update for bot_token {bot_token}: {update_data}")
        
        # Try to find admin user by bot token first
        try:
            user = User.objects.get(telegram_bot_token=bot_token)
            logger.info(f"Found admin user {user.username} for token")
            process_telegram_update(user, update_data)
            return JsonResponse({'status': 'ok'})
        except User.DoesNotExist:
            pass
        
        # Try to find salon by bot token
        try:
            salon = Salon.objects.get(telegram_bot_token=bot_token)
            logger.info(f"Found salon {salon.name} for token")
            process_salon_client_update(salon, update_data)
            return JsonResponse({'status': 'ok'})
        except Salon.DoesNotExist:
            pass
        
        logger.error(f"Bot token {bot_token} not found in users or salons")
        return JsonResponse({'error': 'Bot not found'}, status=404)
        
    except Exception as e:
        logger.error(f"Error processing webhook: {str(e)}")
        return JsonResponse({'error': 'Internal error'}, status=500)


def process_telegram_update(user, update_data):
    """Process Telegram update synchronously for admin bots"""
    try:
        from .bot import SalonifyBot
        
        # Create bot instance
        bot = SalonifyBot(user.telegram_bot_token, user)
        
        # Create Update object
        update = Update.de_json(update_data, bot.application.bot)
        
        # Handle different types of updates
        if update.message:
            handle_message_sync(bot, update, user)
        elif update.callback_query:
            handle_callback_query_sync(bot, update, user)
            
    except Exception as e:
        logger.error(f"Error processing update: {str(e)}")


def process_salon_client_update(salon, update_data):
    """Process Telegram update synchronously for salon client bots"""
    try:
        from .client_bot import SalonClientBot
        
        # Create client bot instance
        bot = SalonClientBot(salon)
        
        # Create Update object
        update = Update.de_json(update_data, bot.application.bot)
        
        # Handle different types of updates
        if update.message:
            handle_client_message_sync(bot, update, salon)
        elif update.callback_query:
            handle_client_callback_query_sync(bot, update, salon)
            
    except Exception as e:
        logger.error(f"Error processing salon client update: {str(e)}")


def handle_message_sync(bot, update, user):
    """Handle message synchronously"""
    try:
        message = update.message
        text = message.text
        chat_id = message.chat.id
        
        # Get or create user session data using Telegram user ID
        telegram_user_id = message.from_user.id
        session_data = get_user_session(telegram_user_id)
        
        # Handle commands
        if text == '/start':
            clear_user_session(telegram_user_id)
            send_message(bot, chat_id, f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Salonify Admin Bot, {message.from_user.first_name}!

üè™ –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –í–õ–ê–î–ï–õ–¨–¶–ï–í —Å–∞–ª–æ–Ω–æ–≤ –∫—Ä–∞—Å–æ—Ç—ã.

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —Å–∞–ª–æ–Ω
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.
            """.strip())
            
        elif text == '/help':
            send_message(bot, chat_id, """
ü§ñ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–∞–ª–æ–Ω–æ–≤:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/register_salon - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–∞–ª–æ–Ω
/create_bot - –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
/my_salons - –ú–æ–∏ —Å–∞–ª–æ–Ω—ã
/salon_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–ª–æ–Ω–∞

üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–∞–ª–æ–Ω–æ–≤.
–í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–µ–π.
            """.strip())
            
        elif text == '/register_salon':
            start_salon_registration(telegram_user_id)
            send_message(bot, chat_id, """
üè™ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∞–ª–æ–Ω–∞

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞:
            """.strip())
            
        elif session_data.get('state') == 'salon_registration':
            handle_salon_registration_step(bot, user, chat_id, text, session_data, telegram_user_id)
            
        elif text == '/create_bot':
            clear_user_session(telegram_user_id)  # Clear any existing session
            send_message(bot, chat_id, """
ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤

–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
–ß–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç –∫–ª–∏–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç:
‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏
‚Ä¢ –û—Ç–º–µ–Ω—è—Ç—å –∑–∞–ø–∏—Å–∏
‚Ä¢ –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∞–ª–æ–Ω–µ

–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!
            """.strip())
            
        elif text == '/my_salons':
            clear_user_session(telegram_user_id)  # Clear any existing session
            send_message(bot, chat_id, """
üè™ –ú–æ–∏ —Å–∞–ª–æ–Ω—ã

–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö —Å–∞–ª–æ–Ω–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–ª–æ–Ω–æ–≤
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —É—Å–ª—É–≥–∞–º–∏ –∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            """.strip())
            
        elif text == '/salon_stats':
            clear_user_session(telegram_user_id)  # Clear any existing session
            send_message(bot, chat_id, """
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–ª–æ–Ω–∞

–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å:
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏
‚Ä¢ –î–æ—Ö–æ–¥—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤
            """.strip())
            
        else:
            # Don't clear session for unknown commands - user might be in registration process
            if not session_data.get('state'):
                send_message(bot, chat_id, f"""
‚ùì –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–∞–ª–æ–Ω–æ–≤ –∫—Ä–∞—Å–æ—Ç—ã.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

–ï—Å–ª–∏ –≤—ã –∫–ª–∏–µ–Ω—Ç —Å–∞–ª–æ–Ω–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç –≤–∞—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞.
                """.strip())
            else:
                # User is in some process, let them know
                send_message(bot, chat_id, f"""
‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {text}

–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∞–ª–æ–Ω–∞.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.
                """.strip())
            
    except Exception as e:
        logger.error(f"Error handling message: {str(e)}")


def handle_callback_query_sync(bot, update, user):
    """Handle callback query synchronously"""
    try:
        query = update.callback_query
        send_message(bot, query.message.chat.id, "Callback queries –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∫–∞")
    except Exception as e:
        logger.error(f"Error handling callback query: {str(e)}")


def handle_client_message_sync(bot, update, salon):
    """Handle message synchronously for client bots"""
    try:
        import asyncio
        from telegram.ext import ContextTypes
        
        # Create a simple context
        context = ContextTypes.DEFAULT_TYPE()
        
        # Run the async method synchronously
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        async def handle_async():
            await bot.handle_message(update, context)
        
        loop.run_until_complete(handle_async())
        loop.close()
        
    except Exception as e:
        logger.error(f"Error handling client message: {str(e)}")


def handle_client_callback_query_sync(bot, update, salon):
    """Handle callback query synchronously for client bots"""
    try:
        import asyncio
        from telegram.ext import ContextTypes
        
        # Create a simple context
        context = ContextTypes.DEFAULT_TYPE()
        
        # Run the async method synchronously
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        async def handle_async():
            await bot.button_callback(update, context)
        
        loop.run_until_complete(handle_async())
        loop.close()
        
    except Exception as e:
        logger.error(f"Error handling client callback query: {str(e)}")


def send_message(bot, chat_id, text):
    """Send message using requests"""
    import requests
    
    url = f"https://api.telegram.org/bot{bot.token}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    
    try:
        response = requests.post(url, json=data)
        if response.status_code == 200:
            logger.info(f"Message sent successfully to chat {chat_id}")
        else:
            logger.error(f"Failed to send message: {response.text}")
    except Exception as e:
        logger.error(f"Error sending message: {str(e)}")


@login_required
@require_http_methods(["POST"])
def start_bot(request):
    """Start bot for current user"""
    try:
        user = request.user
        
        if not user.telegram_bot_token:
            return JsonResponse({'error': 'No bot token configured'}, status=400)
        
        # Start bot (this would be handled by a management command or background task)
        # For now, just return success
        logger.info(f"Starting bot for user {user.username}")
        
        return JsonResponse({'status': 'Bot started'})
        
    except Exception as e:
        logger.error(f"Error starting bot: {str(e)}")
        return JsonResponse({'error': 'Failed to start bot'}, status=500)


@login_required
@require_http_methods(["POST"])
def stop_bot(request):
    """Stop bot for current user"""
    try:
        user = request.user
        
        # Stop bot (this would be handled by a management command or background task)
        # For now, just return success
        logger.info(f"Stopping bot for user {user.username}")
        
        return JsonResponse({'status': 'Bot stopped'})
        
    except Exception as e:
        logger.error(f"Error stopping bot: {str(e)}")
        return JsonResponse({'error': 'Failed to stop bot'}, status=500) 