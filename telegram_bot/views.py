import json
import logging
import asyncio
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.contrib.auth.decorators import login_required
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from telegram import Update
from telegram.ext import ContextTypes
from .bot import get_or_create_bot, start_bot_for_user, stop_bot_for_user

User = get_user_model()
logger = logging.getLogger(__name__)


@csrf_exempt
@require_http_methods(["POST"])
def webhook(request, bot_token):
    """Handle Telegram webhook updates"""
    try:
        # Find user by bot token
        user = get_object_or_404(User, telegram_bot_token=bot_token)
        
        # Parse update
        update_data = json.loads(request.body)
        logger.info(f"Received update for user {user.username}: {update_data}")
        
        # Process update synchronously
        process_telegram_update(user, update_data)
        
        return JsonResponse({'status': 'ok'})
        
    except User.DoesNotExist:
        logger.error(f"Bot token {bot_token} not found")
        return JsonResponse({'error': 'Bot not found'}, status=404)
    except Exception as e:
        logger.error(f"Error processing webhook: {str(e)}")
        return JsonResponse({'error': 'Internal error'}, status=500)


def process_telegram_update(user, update_data):
    """Process Telegram update synchronously"""
    try:
        from .bot import SalonifyBot
        
        # Create bot instance
        bot = SalonifyBot(user.telegram_bot_token, user)
        
        # Create Update object
        update = Update.de_json(update_data, bot.application.bot)
        
        # Handle different types of updates
        if update.message:
            handle_message_sync(bot, update, user)
        elif update.callback_query:
            handle_callback_query_sync(bot, update, user)
            
    except Exception as e:
        logger.error(f"Error processing update: {str(e)}")


def handle_message_sync(bot, update, user):
    """Handle message synchronously"""
    try:
        message = update.message
        text = message.text
        chat_id = message.chat.id
        
        # Handle commands
        if text == '/start':
            send_message(bot, chat_id, f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Salonify Admin Bot, {message.from_user.first_name}!

üè™ –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –í–õ–ê–î–ï–õ–¨–¶–ï–í —Å–∞–ª–æ–Ω–æ–≤ –∫—Ä–∞—Å–æ—Ç—ã.

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —Å–∞–ª–æ–Ω
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.
            """.strip())
            
        elif text == '/help':
            send_message(bot, chat_id, """
ü§ñ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–∞–ª–æ–Ω–æ–≤:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/register_salon - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–∞–ª–æ–Ω
/create_bot - –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
/my_salons - –ú–æ–∏ —Å–∞–ª–æ–Ω—ã
/salon_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–ª–æ–Ω–∞

üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–∞–ª–æ–Ω–æ–≤.
–í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–µ–π.
            """.strip())
            
        elif text == '/register_salon':
            send_message(bot, chat_id, """
üè™ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∞–ª–æ–Ω–∞

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞:
            """.strip())
            
        elif text == '/create_bot':
            send_message(bot, chat_id, """
ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤

–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
–ß–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç –∫–ª–∏–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç:
‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏
‚Ä¢ –û—Ç–º–µ–Ω—è—Ç—å –∑–∞–ø–∏—Å–∏
‚Ä¢ –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∞–ª–æ–Ω–µ

–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!
            """.strip())
            
        elif text == '/my_salons':
            send_message(bot, chat_id, """
üè™ –ú–æ–∏ —Å–∞–ª–æ–Ω—ã

–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö —Å–∞–ª–æ–Ω–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–ª–æ–Ω–æ–≤
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —É—Å–ª—É–≥–∞–º–∏ –∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            """.strip())
            
        elif text == '/salon_stats':
            send_message(bot, chat_id, """
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–ª–æ–Ω–∞

–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å:
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏
‚Ä¢ –î–æ—Ö–æ–¥—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤
            """.strip())
            
        else:
            send_message(bot, chat_id, f"""
‚ùì –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–∞–ª–æ–Ω–æ–≤ –∫—Ä–∞—Å–æ—Ç—ã.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

–ï—Å–ª–∏ –≤—ã –∫–ª–∏–µ–Ω—Ç —Å–∞–ª–æ–Ω–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç –≤–∞—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞.
            """.strip())
            
    except Exception as e:
        logger.error(f"Error handling message: {str(e)}")


def handle_callback_query_sync(bot, update, user):
    """Handle callback query synchronously"""
    try:
        query = update.callback_query
        send_message(bot, query.message.chat.id, "Callback queries –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∫–∞")
    except Exception as e:
        logger.error(f"Error handling callback query: {str(e)}")


def send_message(bot, chat_id, text):
    """Send message using requests"""
    import requests
    
    url = f"https://api.telegram.org/bot{bot.token}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    
    try:
        response = requests.post(url, json=data)
        if response.status_code == 200:
            logger.info(f"Message sent successfully to chat {chat_id}")
        else:
            logger.error(f"Failed to send message: {response.text}")
    except Exception as e:
        logger.error(f"Error sending message: {str(e)}")


@login_required
@require_http_methods(["POST"])
def start_bot(request):
    """Start bot for current user"""
    try:
        user = request.user
        
        if not user.telegram_bot_token:
            return JsonResponse({'error': 'No bot token configured'}, status=400)
        
        # Start bot (this would be handled by a management command or background task)
        # For now, just return success
        logger.info(f"Starting bot for user {user.username}")
        
        return JsonResponse({'status': 'Bot started'})
        
    except Exception as e:
        logger.error(f"Error starting bot: {str(e)}")
        return JsonResponse({'error': 'Failed to start bot'}, status=500)


@login_required
@require_http_methods(["POST"])
def stop_bot(request):
    """Stop bot for current user"""
    try:
        user = request.user
        
        # Stop bot (this would be handled by a management command or background task)
        # For now, just return success
        logger.info(f"Stopping bot for user {user.username}")
        
        return JsonResponse({'status': 'Bot stopped'})
        
    except Exception as e:
        logger.error(f"Error stopping bot: {str(e)}")
        return JsonResponse({'error': 'Failed to stop bot'}, status=500) 