import logging
import json
from typing import Dict, Any
from datetime import datetime, timedelta
import pytz

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode

from django.conf import settings
from django.utils import timezone
from django.contrib.auth import get_user_model
from core.models import Salon, Master, Service, Client, Appointment
from core.tasks import search_embeddings
import openai

User = get_user_model()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot states
BOOKING_PROCESS = 'booking_process'
ASKING_QUESTION = 'asking_question'

# User data keys
USER_DATA_STATE = 'state'
USER_DATA_BOOKING = 'booking_data'


class SalonClientBot:
    """–ë–æ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–∞–ª–æ–Ω–∞"""
    
    def __init__(self, salon: Salon):
        self.salon = salon
        self.token = salon.telegram_bot_token
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """Set up bot command and message handlers"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("services", self.show_services))
        self.application.add_handler(CommandHandler("book", self.book_appointment))
        self.application.add_handler(CommandHandler("my_appointments", self.my_appointments))
        self.application.add_handler(CommandHandler("cancel", self.cancel_appointment))
        self.application.add_handler(CommandHandler("contact", self.contact_info))
        
        # Callback query handler for inline keyboards
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # Message handler for text messages
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # Contact handler for phone number sharing
        self.application.add_handler(MessageHandler(filters.CONTACT, self.handle_contact))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        
        # Get or create client
        client, created = Client.objects.get_or_create(
            salon=self.salon,
            telegram_id=str(user.id),
            defaults={
                'full_name': f"{user.first_name or ''} {user.last_name or ''}".strip(),
                'phone': '',
                'email': ''
            }
        )
        
        if created:
            welcome_message = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {self.salon.name}, {user.first_name}!

üè™ –Ø - –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã.

–ß—Ç–æ —è —É–º–µ—é:
üìÖ –ó–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ —É—Å–ª—É–≥–∏
üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏
üë• –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
üìû –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚ùì –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!
            """
        else:
            welcome_message = f"""
üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!

üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {self.salon.name}!

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?
üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É - /book
üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏ - /services
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã - /contact
            """
        
        await update.message.reply_text(welcome_message.strip())
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = f"""
ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ {self.salon.name}:

üìÖ /book - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É
üìã /services - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —É—Å–ª—É–≥–∏
üë• /my_appointments - –ú–æ–∏ –∑–∞–ø–∏—Å–∏
‚ùå /cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
üìû /contact - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí¨ –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!

üìç –ê–¥—Ä–µ—Å: {self.salon.address}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {self.salon.phone}
        """
        
        await update.message.reply_text(help_text.strip())
    
    async def show_services(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show available services"""
        services = Service.objects.filter(salon=self.salon, is_active=True)
        
        if not services.exists():
            await update.message.reply_text("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.")
            return
        
        services_text = f"üíá‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∏ —Å–∞–ª–æ–Ω–∞ {self.salon.name}:\n\n"
        
        # Group services by category
        categories = {}
        for service in services:
            category = service.get_category_display()
            if category not in categories:
                categories[category] = []
            categories[category].append(service)
        
        for category, category_services in categories.items():
            services_text += f"üìÇ {category}:\n"
            for service in category_services:
                master_info = f" (–º–∞—Å—Ç–µ—Ä: {service.master.full_name})" if service.master else ""
                services_text += f"‚Ä¢ {service.name}{master_info}\n"
                services_text += f"  üí∞ {service.price} —Ä—É–±. | ‚è± {service.duration_minutes} –º–∏–Ω.\n"
                if service.description:
                    services_text += f"  üìù {service.description}\n"
                services_text += "\n"
        
        services_text += "üìÖ –î–ª—è –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /book"
        
        await update.message.reply_text(services_text)
    
    async def book_appointment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start booking process"""
        services = Service.objects.filter(salon=self.salon, is_active=True)
        
        if not services.exists():
            await update.message.reply_text("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.")
            return
        
        # Create inline keyboard with services
        keyboard = []
        for service in services:
            master_info = f" ({service.master.full_name})" if service.master else ""
            keyboard.append([InlineKeyboardButton(
                f"{service.name}{master_info} - {service.price} —Ä—É–±.",
                callback_data=f"book_service_{service.id}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üíá‚Äç‚ôÄÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –≤ {self.salon.name}:",
            reply_markup=reply_markup
        )
    
    async def my_appointments(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show user's appointments"""
        user_id = str(update.effective_user.id)
        
        try:
            client = Client.objects.get(salon=self.salon, telegram_id=user_id)
        except Client.DoesNotExist:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        appointments = Appointment.objects.filter(
            client=client,
            scheduled_at__gte=timezone.now()
        ).order_by('scheduled_at')
        
        if not appointments.exists():
            await update.message.reply_text("üìÖ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.")
            return
        
        appointments_text = f"üìÖ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –≤ {self.salon.name}:\n\n"
        
        for appointment in appointments:
            status_emoji = {
                'scheduled': '‚è∞',
                'confirmed': '‚úÖ',
                'in_progress': 'üîÑ',
                'completed': '‚úÖ',
                'cancelled': '‚ùå',
                'no_show': '‚ùå'
            }.get(appointment.status, '‚ùì')
            
            appointments_text += f"{status_emoji} {appointment.service.name}\n"
            appointments_text += f"üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {appointment.master.full_name}\n"
            appointments_text += f"üìÖ –î–∞—Ç–∞: {appointment.scheduled_at.strftime('%d.%m.%Y')}\n"
            appointments_text += f"üïê –í—Ä–µ–º—è: {appointment.scheduled_at.strftime('%H:%M')}\n"
            appointments_text += f"üí∞ –¶–µ–Ω–∞: {appointment.price} —Ä—É–±.\n"
            appointments_text += f"üìä –°—Ç–∞—Ç—É—Å: {appointment.get_status_display()}\n"
            if appointment.notes:
                appointments_text += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {appointment.notes}\n"
            appointments_text += "\n"
        
        appointments_text += "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
        
        await update.message.reply_text(appointments_text)
    
    async def cancel_appointment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel appointment"""
        user_id = str(update.effective_user.id)
        
        try:
            client = Client.objects.get(salon=self.salon, telegram_id=user_id)
        except Client.DoesNotExist:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        appointments = Appointment.objects.filter(
            client=client,
            scheduled_at__gte=timezone.now(),
            status__in=['scheduled', 'confirmed']
        ).order_by('scheduled_at')
        
        if not appointments.exists():
            await update.message.reply_text("üìÖ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return
        
        # Create inline keyboard with appointments
        keyboard = []
        for appointment in appointments:
            keyboard.append([InlineKeyboardButton(
                f"{appointment.service.name} - {appointment.scheduled_at.strftime('%d.%m %H:%M')}",
                callback_data=f"cancel_appointment_{appointment.id}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            reply_markup=reply_markup
        )
    
    async def contact_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show contact information"""
        contact_text = f"""
üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üè™ {self.salon.name}
üìç –ê–¥—Ä–µ—Å: {self.salon.address}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {self.salon.phone}
        """
        
        if self.salon.email:
            contact_text += f"üìß Email: {self.salon.email}\n"
        
        if self.salon.working_hours:
            hours_text = self.salon.working_hours.get('text', '')
            if hours_text:
                contact_text += f"üïê –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {hours_text}\n"
        
        contact_text += "\nüìÖ –î–ª—è –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /book"
        
        await update.message.reply_text(contact_text.strip())
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline keyboard button presses"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith('book_service_'):
            service_id = data.split('_')[2]
            await self.handle_service_booking(query, context, service_id)
        
        elif data.startswith('book_master_'):
            master_id = data.split('_')[2]
            await self.handle_master_selection(query, context, master_id)
        
        elif data.startswith('cancel_appointment_'):
            appointment_id = data.split('_')[2]
            await self.handle_appointment_cancellation(query, context, appointment_id)
    
    async def handle_service_booking(self, query, context, service_id):
        """Handle service booking"""
        try:
            service = Service.objects.get(id=service_id, salon=self.salon)
        except Service.DoesNotExist:
            await query.edit_message_text("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # Store booking data
        context.user_data[USER_DATA_STATE] = BOOKING_PROCESS
        context.user_data[USER_DATA_BOOKING] = {
            'service_id': service_id,
            'step': 'select_master'
        }
        
        # Get available masters
        if service.master:
            # Service has specific master
            masters = [service.master]
        else:
            # Service can be done by any master
            masters = Master.objects.filter(salon=self.salon, is_active=True)
        
        if not masters:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏.")
            return
        
        # Create keyboard with masters
        keyboard = []
        for master in masters:
            keyboard.append([InlineKeyboardButton(
                f"üë®‚Äçüíº {master.full_name}",
                callback_data=f"book_master_{master.id}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üíá‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞: {service.name}\n"
            f"üí∞ –¶–µ–Ω–∞: {service.price} —Ä—É–±.\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service.duration_minutes} –º–∏–Ω.\n\n"
            "üë®‚Äçüíº –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=reply_markup
        )
    
    async def handle_master_selection(self, query, context, master_id):
        """Handle master selection"""
        try:
            master = Master.objects.get(id=master_id, salon=self.salon)
        except Master.DoesNotExist:
            await query.edit_message_text("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        booking_data = context.user_data.get(USER_DATA_BOOKING, {})
        booking_data['master_id'] = master_id
        booking_data['step'] = 'select_date'
        context.user_data[USER_DATA_BOOKING] = booking_data
        
        await query.edit_message_text(
            f"üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {master.full_name}\n\n"
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:\n\n"
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 14:30"
        )
    
    async def handle_appointment_cancellation(self, query, context, appointment_id):
        """Handle appointment cancellation"""
        try:
            appointment = Appointment.objects.get(id=appointment_id)
        except Appointment.DoesNotExist:
            await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # Cancel appointment
        appointment.status = 'cancelled'
        appointment.save()
        
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞:\n\n"
            f"üíá‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞: {appointment.service.name}\n"
            f"üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {appointment.master.full_name}\n"
            f"üìÖ –î–∞—Ç–∞: {appointment.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            "üìû –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages"""
        user_state = context.user_data.get(USER_DATA_STATE)
        
        if user_state == BOOKING_PROCESS:
            await self.handle_booking_process(update, context)
        else:
            # Handle as question
            await self.handle_question(update, context)
    
    async def handle_booking_process(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle booking process steps"""
        booking_data = context.user_data.get(USER_DATA_BOOKING, {})
        step = booking_data.get('step')
        text = update.message.text
        
        if step == 'select_date':
            # Parse date and time
            try:
                # Expected format: DD.MM.YYYY HH:MM
                appointment_datetime = datetime.strptime(text, '%d.%m.%Y %H:%M')
                appointment_datetime = timezone.make_aware(appointment_datetime)
                
                # Check if date is in the future
                if appointment_datetime <= timezone.now():
                    await update.message.reply_text(
                        "‚ùå –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
                    return
                
                # Create appointment
                user_id = str(update.effective_user.id)
                client = Client.objects.get(salon=self.salon, telegram_id=user_id)
                service = Service.objects.get(id=booking_data['service_id'])
                master = Master.objects.get(id=booking_data['master_id'])
                
                appointment = Appointment.objects.create(
                    salon=self.salon,
                    client=client,
                    service=service,
                    master=master,
                    scheduled_at=appointment_datetime,
                    price=service.price,
                    status='scheduled'
                )
                
                success_message = f"""
‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üè™ –°–∞–ª–æ–Ω: {self.salon.name}
üíá‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞: {service.name}
üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {master.full_name}
üìÖ –î–∞—Ç–∞: {appointment_datetime.strftime('%d.%m.%Y')}
üïê –í—Ä–µ–º—è: {appointment_datetime.strftime('%H:%M')}
üí∞ –¶–µ–Ω–∞: {service.price} —Ä—É–±.
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service.duration_minutes} –º–∏–Ω.

üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–∞–ª–æ–Ω–∞:
üìç {self.salon.address}
üìû {self.salon.phone}

‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤–æ–≤—Ä–µ–º—è!
                """
                
                await update.message.reply_text(success_message.strip())
                
                # Clear booking data
                context.user_data.clear()
                
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 14:30"
                )
            except Exception as e:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}"
                )
                context.user_data.clear()
    
    async def handle_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle user questions using OpenAI"""
        user_question = update.message.text
        
        # Simple responses for common questions
        if any(word in user_question.lower() for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ']):
            await self.show_services(update, context)
            return
        
        if any(word in user_question.lower() for word in ['–∞–¥—Ä–µ—Å', '–≥–¥–µ', '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è']):
            await self.contact_info(update, context)
            return
        
        if any(word in user_question.lower() for word in ['–≤—Ä–µ–º—è', '—á–∞—Å—ã', '—Ä–∞–±–æ—Ç–∞']):
            await self.contact_info(update, context)
            return
        
        if any(word in user_question.lower() for word in ['–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–∑–∞–ø–∏—Å—å', '–∑–∞–ø–∏—Å–∞—Ç—å']):
            await self.book_appointment(update, context)
            return
        
        # Default response
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! üòä\n\n"
            f"–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n"
            f"üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É - /book\n"
            f"üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏ - /services\n"
            f"üìû –£–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã - /contact\n\n"
            f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
            f"üìû {self.salon.phone}"
        )
    
    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle contact sharing"""
        contact = update.message.contact
        user_id = str(update.effective_user.id)
        
        try:
            client = Client.objects.get(salon=self.salon, telegram_id=user_id)
            client.phone = contact.phone_number
            client.save()
            
            await update.message.reply_text(
                f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {contact.phone_number}\n\n"
                f"–¢–µ–ø–µ—Ä—å –º—ã —Å–º–æ–∂–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–ø–∏—Å–µ–π."
            )
        except Client.DoesNotExist:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
    
    async def run(self):
        """Run the bot"""
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
    
    async def stop(self):
        """Stop the bot"""
        await self.application.updater.stop()
        await self.application.stop()
        await self.application.shutdown()


# Global client bot instances
client_bot_instances: Dict[str, SalonClientBot] = {}


def get_or_create_client_bot(salon: Salon) -> SalonClientBot:
    """Get or create client bot instance for salon"""
    if not salon.telegram_bot_token:
        raise ValueError("Salon has no Telegram bot token")
    
    salon_id = str(salon.id)
    
    if salon_id not in client_bot_instances:
        client_bot_instances[salon_id] = SalonClientBot(salon)
    
    return client_bot_instances[salon_id]


async def start_client_bot_for_salon(salon: Salon):
    """Start client bot for a specific salon"""
    try:
        bot = get_or_create_client_bot(salon)
        await bot.run()
        logger.info(f"Started client bot for salon {salon.name}")
    except Exception as e:
        logger.error(f"Error starting client bot for salon {salon.name}: {str(e)}")


async def stop_client_bot_for_salon(salon: Salon):
    """Stop client bot for a specific salon"""
    try:
        salon_id = str(salon.id)
        if salon_id in client_bot_instances:
            bot = client_bot_instances[salon_id]
            await bot.stop()
            del client_bot_instances[salon_id]
            logger.info(f"Stopped client bot for salon {salon.name}")
    except Exception as e:
        logger.error(f"Error stopping client bot for salon {salon.name}: {str(e)}")


async def start_all_client_bots():
    """Start client bots for all salons with tokens"""
    from asgiref.sync import sync_to_async
    
    @sync_to_async
    def get_salons():
        return list(Salon.objects.exclude(telegram_bot_token__isnull=True).exclude(telegram_bot_token=''))
    
    salons = await get_salons()
    
    for salon in salons:
        try:
            await start_client_bot_for_salon(salon)
        except Exception as e:
            logger.error(f"Error starting client bot for salon {salon.name}: {str(e)}") 