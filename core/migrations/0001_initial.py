# Generated by Django 4.2.7 on 2025-07-13 21:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telegram_bot_token', models.CharField(blank=True, help_text='Токен для интеграции с Telegram ботом', max_length=255, verbose_name='Токен Telegram бота')),
                ('openai_api_token', models.CharField(blank=True, help_text='Токен для интеграции с OpenAI API', max_length=255, verbose_name='API токен OpenAI')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Master',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200, verbose_name='Полное имя')),
                ('phone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть в формате: '+999999999'. До 15 цифр.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Телефон')),
                ('specialization', models.CharField(help_text='Основная специализация мастера', max_length=200, verbose_name='Специализация')),
                ('working_hours', models.JSONField(default=dict, help_text='Расписание работы мастера в формате JSON', verbose_name='Часы работы')),
                ('is_active', models.BooleanField(default=True, help_text='Активен ли мастер для записи', verbose_name='Активен')),
                ('telegram_id', models.CharField(blank=True, max_length=50, verbose_name='Telegram ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Мастер',
                'verbose_name_plural': 'Мастера',
            },
        ),
        migrations.CreateModel(
            name='Salon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название салона')),
                ('address', models.TextField(help_text='Полный адрес салона', verbose_name='Адрес')),
                ('phone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть в формате: '+999999999'. До 15 цифр.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Телефон')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('working_hours', models.JSONField(default=dict, help_text='Расписание работы салона в формате JSON', verbose_name='Часы работы')),
                ('timezone', models.CharField(default='Europe/Moscow', max_length=50, verbose_name='Часовой пояс')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('user', models.ForeignKey(help_text='Пользователь-владелец салона', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'Салон',
                'verbose_name_plural': 'Салоны',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название услуги')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('category', models.CharField(choices=[('hair', 'Волосы'), ('nails', 'Ногти'), ('face', 'Лицо'), ('body', 'Тело'), ('massage', 'Массаж'), ('other', 'Другое')], default='other', max_length=20, verbose_name='Категория')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('duration_minutes', models.PositiveIntegerField(verbose_name='Длительность (минуты)')),
                ('is_active', models.BooleanField(default=True, help_text='Доступна ли услуга для записи', verbose_name='Активна')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('master', models.ForeignKey(blank=True, help_text='Мастер, который выполняет услугу (необязательно)', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.master', verbose_name='Мастер')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.salon', verbose_name='Салон')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.TextField(verbose_name='Заголовок поста')),
                ('image_url', models.URLField(blank=True, verbose_name='URL изображения')),
                ('scheduled_at', models.DateTimeField(verbose_name='Время публикации')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='Фактическое время публикации')),
                ('status', models.CharField(choices=[('draft', 'Черновик'), ('scheduled', 'Запланирован'), ('published', 'Опубликован'), ('failed', 'Ошибка публикации')], default='draft', max_length=20, verbose_name='Статус')),
                ('error_message', models.TextField(blank=True, verbose_name='Сообщение об ошибке')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.salon', verbose_name='Салон')),
            ],
            options={
                'verbose_name': 'Пост',
                'verbose_name_plural': 'Посты',
            },
        ),
        migrations.AddField(
            model_name='master',
            name='salon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.salon', verbose_name='Салон'),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название документа')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('doc_type', models.CharField(choices=[('policy', 'Политика'), ('price_list', 'Прайс-лист'), ('instruction', 'Инструкция'), ('contract', 'Договор'), ('other', 'Другое')], default='other', max_length=20, verbose_name='Тип документа')),
                ('file_path', models.CharField(blank=True, default='', max_length=500, verbose_name='Путь к файлу')),
                ('file_size', models.PositiveIntegerField(verbose_name='Размер файла (байты)')),
                ('tags', models.CharField(blank=True, help_text='Теги для поиска, разделенные запятыми', max_length=500, verbose_name='Теги')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата загрузки')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.salon', verbose_name='Салон')),
            ],
            options={
                'verbose_name': 'Документ',
                'verbose_name_plural': 'Документы',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200, verbose_name='Полное имя')),
                ('phone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть в формате: '+999999999'. До 15 цифр.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Телефон')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('telegram_id', models.CharField(blank=True, max_length=50, verbose_name='Telegram ID')),
                ('visits_count', models.PositiveIntegerField(default=0, verbose_name='Количество визитов')),
                ('total_spent', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Общая сумма потрачено')),
                ('last_visit_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата последнего визита')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.salon', verbose_name='Салон')),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_at', models.DateTimeField(verbose_name='Время записи')),
                ('status', models.CharField(choices=[('scheduled', 'Запланирована'), ('confirmed', 'Подтверждена'), ('in_progress', 'В процессе'), ('completed', 'Завершена'), ('cancelled', 'Отменена'), ('no_show', 'Не явился')], default='scheduled', max_length=20, verbose_name='Статус')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('notes', models.TextField(blank=True, verbose_name='Заметки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.client', verbose_name='Клиент')),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.master', verbose_name='Мастер')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.salon', verbose_name='Салон')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.service', verbose_name='Услуга')),
            ],
            options={
                'verbose_name': 'Запись',
                'verbose_name_plural': 'Записи',
            },
        ),
        migrations.CreateModel(
            name='Embedding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chunk_index', models.PositiveIntegerField(verbose_name='Индекс части')),
                ('content_chunk', models.TextField(verbose_name='Часть содержимого')),
                ('embedding_vector', models.JSONField(verbose_name='Вектор эмбеддинга')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.document', verbose_name='Документ')),
            ],
            options={
                'verbose_name': 'Эмбеддинг',
                'verbose_name_plural': 'Эмбеддинги',
                'unique_together': {('document', 'chunk_index')},
            },
        ),
    ]
